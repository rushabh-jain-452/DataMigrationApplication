package com.mycompany.datamigrationapplication;

import com.mycompany.datamigrationapplication.constants.Constants;
import com.mycompany.datamigrationapplication.constants.DBMS;
import com.mycompany.datamigrationapplication.exception.DatabaseNotSupportedException;
import com.mycompany.datamigrationapplication.helpers.QueryGenerator;
import com.mycompany.datamigrationapplication.helpers.MysqlQueryGenerator;
import com.mycompany.datamigrationapplication.helpers.OracleQueryGenerator;
import com.mycompany.datamigrationapplication.helpers.SqlServerQueryGenerator;

import java.awt.Color;
import java.awt.Dimension;
import java.beans.PropertyChangeEvent;
import java.beans.PropertyChangeListener;
import java.sql.Connection;
import java.sql.DatabaseMetaData;
import java.sql.DriverManager;
import java.sql.PreparedStatement;
import java.sql.ResultSet;
import java.sql.ResultSetMetaData;
import java.sql.SQLException;
import java.sql.SQLIntegrityConstraintViolationException;
import java.sql.SQLSyntaxErrorException;
import java.sql.Statement;
import java.sql.Types;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.Collections;
import java.util.HashSet;
import java.util.List;
import java.util.Set;
import javax.swing.DefaultListModel;
import javax.swing.JComboBox;
import javax.swing.JOptionPane;
import javax.swing.JTable;
import javax.swing.SwingWorker;
import javax.swing.table.DefaultTableModel;

public class MigrationApplication extends javax.swing.JFrame {
    
    String dbmsList[] = new String[]{"Oracle", "MySQL", "Microsoft SQL Server"};

//    Source Database Details
    private int sourceDbms;
    private int sourcePortNo = 0;
    private String sourceHostname = null;
    private String sourceUsername = null;
    private String sourcePassword = null;
    private String sourceDatabasename = null;
//    Destination Database Details
    private int destDbms;
    private int destPortNo = 0;
    private String destHostname = null;
    private String destUsername = null;
    private String destPassword = null;
    private String destDatabasename = null;
    
    // Database Connection Objects
    // For Source
    Connection sourceConn = null;
    Statement sourceStmt = null;
    PreparedStatement sourcePrepStmt = null;
    ResultSet rs = null;
    DatabaseMetaData dbmd = null;
    ResultSetMetaData rsmd = null;
    // For Destination
    Connection destConn = null;
    Statement destStmt = null;
    PreparedStatement destPrepStmt = null;
    // For storing sql
    String sql = "";
    // For tracking error
    boolean error = false;
    
    final DefaultListModel sourceTablesListModel = new DefaultListModel();
    final DefaultListModel destTablesListModel = new DefaultListModel();

    // Query Generator
    QueryGenerator queryGenerator = null;
    
    /* Constants */
    final String errorMessage = "Unfortunately, some technical error occured...";

    /** Creates new form MigrationApplication */
    public MigrationApplication() {
        initComponents();
        // Constructor code
        fillDbmsCombobox(cmbSourceDbms);
        fillDbmsCombobox(cmbDestDbms);

        listSourceTables.setModel(sourceTablesListModel);
        listDestTables.setModel(destTablesListModel);

        // Remove ToolTip Text
        jTabbedPane.setToolTipText(null);
        
        jTable.setAutoResizeMode(JTable.AUTO_RESIZE_OFF);
        jTable.setShowVerticalLines(true);
        
        // Print Window width and height
        Dimension d = this.getPreferredSize();
        Dimension myDimension = new Dimension(1366, 850);
        this.setPreferredSize(myDimension);
        this.setMaximumSize(myDimension);
        this.setSize(myDimension);
        
        lblTableName.setText("");
    }

    /** This method is called from within the constructor to
     * initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is
     * always regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jTabbedPane = new javax.swing.JTabbedPane();
        jPanel1 = new javax.swing.JPanel();
        btnTab1Next = new javax.swing.JButton();
        jLabel11 = new javax.swing.JLabel();
        cmbSourceDbms = new javax.swing.JComboBox<>();
        txtSourcePortNo = new javax.swing.JTextField();
        jLabel12 = new javax.swing.JLabel();
        jLabel13 = new javax.swing.JLabel();
        txtSourceHostname = new javax.swing.JTextField();
        lblSourceDatabaseName = new javax.swing.JLabel();
        jLabel14 = new javax.swing.JLabel();
        txtSourceUsername = new javax.swing.JTextField();
        txtSourcePassword = new javax.swing.JPasswordField();
        jLabel15 = new javax.swing.JLabel();
        btnTestSourceConnection = new javax.swing.JButton();
        lblTestSourceConn = new javax.swing.JLabel();
        jLabel16 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        btnTab1Reset = new javax.swing.JButton();
        cmbSourceDatabaseNames = new javax.swing.JComboBox<>();
        jPanel2 = new javax.swing.JPanel();
        jLabel17 = new javax.swing.JLabel();
        lblSourceTables = new javax.swing.JLabel();
        jScrollPane1 = new javax.swing.JScrollPane();
        listSourceTables = new javax.swing.JList<>();
        btnMoveSelected = new javax.swing.JButton();
        btnMoveAll = new javax.swing.JButton();
        btnMoveAllBack = new javax.swing.JButton();
        btnMoveSelectedBack = new javax.swing.JButton();
        jLabel1 = new javax.swing.JLabel();
        lblDestTables = new javax.swing.JLabel();
        jScrollPane2 = new javax.swing.JScrollPane();
        listDestTables = new javax.swing.JList<>();
        btnTab2Next = new javax.swing.JButton();
        jPanelTable = new javax.swing.JPanel();
        jScrollPane3 = new javax.swing.JScrollPane();
        jTable = new javax.swing.JTable();
        jLabel25 = new javax.swing.JLabel();
        lblTableName = new javax.swing.JLabel();
        jPanel3 = new javax.swing.JPanel();
        jLabel18 = new javax.swing.JLabel();
        jLabel19 = new javax.swing.JLabel();
        cmbDestDbms = new javax.swing.JComboBox<>();
        txtDestPortNo = new javax.swing.JTextField();
        jLabel20 = new javax.swing.JLabel();
        jLabel21 = new javax.swing.JLabel();
        txtDestHostname = new javax.swing.JTextField();
        lblDestDatabaseName = new javax.swing.JLabel();
        txtDestDatabaseName = new javax.swing.JTextField();
        txtDestUsername = new javax.swing.JTextField();
        jLabel22 = new javax.swing.JLabel();
        jLabel23 = new javax.swing.JLabel();
        txtDestPassword = new javax.swing.JPasswordField();
        chkCreateDatabase = new javax.swing.JCheckBox();
        btnTestDestConnection = new javax.swing.JButton();
        lblTestDestConn = new javax.swing.JLabel();
        jLabel24 = new javax.swing.JLabel();
        btnTab3Reset = new javax.swing.JButton();
        chkDropTables = new javax.swing.JCheckBox();
        btnMigrateTables = new javax.swing.JButton();
        jProgressBar1 = new javax.swing.JProgressBar();
        jPanel4 = new javax.swing.JPanel();
        jLabel3 = new javax.swing.JLabel();
        jLabel4 = new javax.swing.JLabel();
        jLabel5 = new javax.swing.JLabel();
        jLabel6 = new javax.swing.JLabel();
        jLabel7 = new javax.swing.JLabel();
        jLabel8 = new javax.swing.JLabel();
        jLabel9 = new javax.swing.JLabel();
        jLabel10 = new javax.swing.JLabel();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);
        setTitle("Data Migration Application");
        addWindowListener(new java.awt.event.WindowAdapter() {
            public void windowClosing(java.awt.event.WindowEvent evt) {
                formWindowClosing(evt);
            }
        });

        jTabbedPane.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        jTabbedPane.setPreferredSize(new java.awt.Dimension(1280, 768));

        btnTab1Next.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnTab1Next.setText("Next");
        btnTab1Next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTab1NextActionPerformed(evt);
            }
        });

        jLabel11.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel11.setText("DBMS");
        jLabel11.setAutoscrolls(true);

        cmbSourceDbms.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        cmbSourceDbms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSourceDbmsActionPerformed(evt);
            }
        });

        txtSourcePortNo.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        jLabel12.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel12.setText("Port Number");

        jLabel13.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel13.setText("Hostname");

        txtSourceHostname.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        txtSourceHostname.setText("localhost");

        lblSourceDatabaseName.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        lblSourceDatabaseName.setText("Database name");

        jLabel14.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel14.setText("Username");

        txtSourceUsername.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        txtSourcePassword.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        jLabel15.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel15.setText("Password");

        btnTestSourceConnection.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        btnTestSourceConnection.setText("Test Connection");
        btnTestSourceConnection.setPreferredSize(new java.awt.Dimension(200, 35));
        btnTestSourceConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestSourceConnectionActionPerformed(evt);
            }
        });

        lblTestSourceConn.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        lblTestSourceConn.setText("Not Connected");

        jLabel16.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel16.setText("Connection Status:");

        jLabel2.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel2.setText("Source Database Details");
        jLabel2.setToolTipText("Database from which to transfer data");

        btnTab1Reset.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnTab1Reset.setText("Reset");
        btnTab1Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTab1ResetActionPerformed(evt);
            }
        });

        cmbSourceDatabaseNames.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        cmbSourceDatabaseNames.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbSourceDatabaseNamesActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(91, 91, 91)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addComponent(jLabel16)
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                                .addComponent(lblTestSourceConn))
                            .addGroup(jPanel1Layout.createSequentialGroup()
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(jLabel11)
                                            .addComponent(jLabel12)
                                            .addComponent(jLabel13)
                                            .addComponent(jLabel14)
                                            .addComponent(jLabel15))
                                        .addGap(35, 35, 35))
                                    .addComponent(lblSourceDatabaseName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 164, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(26, 26, 26)
                                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(cmbSourceDatabaseNames, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addGroup(jPanel1Layout.createSequentialGroup()
                                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                                            .addComponent(cmbSourceDbms, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtSourcePortNo, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtSourceHostname, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtSourceUsername, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(txtSourcePassword, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                            .addComponent(btnTestSourceConnection, javax.swing.GroupLayout.PREFERRED_SIZE, 221, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGap(260, 260, 260)
                                        .addComponent(btnTab1Reset, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(244, 244, 244)
                        .addComponent(jLabel2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(1058, 1058, 1058)
                        .addComponent(btnTab1Next, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(50, 50, 50)
                        .addComponent(jLabel2))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addGap(127, 127, 127)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel11)
                            .addComponent(cmbSourceDbms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel12)
                            .addComponent(txtSourcePortNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addComponent(btnTab1Reset, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(12, 12, 12)
                        .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel13)
                            .addComponent(txtSourceHostname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))))
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(txtSourceUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel14))
                .addGap(21, 21, 21)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtSourcePassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel15))
                .addGap(26, 26, 26)
                .addComponent(btnTestSourceConnection, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(26, 26, 26)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(cmbSourceDatabaseNames, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblSourceDatabaseName))
                .addGap(50, 50, 50)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(lblTestSourceConn)
                    .addComponent(jLabel16))
                .addGap(74, 74, 74)
                .addComponent(btnTab1Next, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(148, 148, 148))
        );

        jTabbedPane.addTab("   Connect to Database    ", jPanel1);

        jPanel2.addFocusListener(new java.awt.event.FocusAdapter() {
            public void focusGained(java.awt.event.FocusEvent evt) {
                jPanel2FocusGained(evt);
            }
        });

        jLabel17.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel17.setText("Source Tables : ");

        lblSourceTables.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblSourceTables.setText("0");

        listSourceTables.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        listSourceTables.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listSourceTablesValueChanged(evt);
            }
        });
        jScrollPane1.setViewportView(listSourceTables);

        btnMoveSelected.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnMoveSelected.setText(">");
        btnMoveSelected.setToolTipText("Move Selected Table(s)");
        btnMoveSelected.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveSelectedActionPerformed(evt);
            }
        });

        btnMoveAll.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnMoveAll.setText(">>");
        btnMoveAll.setToolTipText("Move All Tables");
        btnMoveAll.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveAllActionPerformed(evt);
            }
        });

        btnMoveAllBack.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnMoveAllBack.setText("<<");
        btnMoveAllBack.setToolTipText("Move All Tables back");
        btnMoveAllBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveAllBackActionPerformed(evt);
            }
        });

        btnMoveSelectedBack.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnMoveSelectedBack.setText("<");
        btnMoveSelectedBack.setToolTipText("Move Selected Table(s) back");
        btnMoveSelectedBack.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMoveSelectedBackActionPerformed(evt);
            }
        });

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel1.setText("Destination Tables : ");

        lblDestTables.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblDestTables.setText("0");

        listDestTables.setFont(new java.awt.Font("Tahoma", 0, 16)); // NOI18N
        listDestTables.addListSelectionListener(new javax.swing.event.ListSelectionListener() {
            public void valueChanged(javax.swing.event.ListSelectionEvent evt) {
                listDestTablesValueChanged(evt);
            }
        });
        jScrollPane2.setViewportView(listDestTables);

        btnTab2Next.setFont(new java.awt.Font("Tahoma", 0, 18)); // NOI18N
        btnTab2Next.setText("Next");
        btnTab2Next.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTab2NextActionPerformed(evt);
            }
        });

        jTable.setAutoCreateRowSorter(true);
        jTable.setFont(new java.awt.Font("Tahoma", 0, 15)); // NOI18N
        jTable.setModel(new javax.swing.table.DefaultTableModel(
            new Object [][] {

            },
            new String [] {

            }
        ));
        jTable.setAutoResizeMode(javax.swing.JTable.AUTO_RESIZE_OFF);
        jTable.setCursor(new java.awt.Cursor(java.awt.Cursor.DEFAULT_CURSOR));
        jTable.addMouseListener(new java.awt.event.MouseAdapter() {
            public void mouseClicked(java.awt.event.MouseEvent evt) {
                jTableMouseClicked(evt);
            }
        });
        jScrollPane3.setViewportView(jTable);

        javax.swing.GroupLayout jPanelTableLayout = new javax.swing.GroupLayout(jPanelTable);
        jPanelTable.setLayout(jPanelTableLayout);
        jPanelTableLayout.setHorizontalGroup(
            jPanelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3)
        );
        jPanelTableLayout.setVerticalGroup(
            jPanelTableLayout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jScrollPane3, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.DEFAULT_SIZE, 462, Short.MAX_VALUE)
        );

        jLabel25.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        jLabel25.setText("Table name : ");

        lblTableName.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        lblTableName.setText("tableName");

        javax.swing.GroupLayout jPanel2Layout = new javax.swing.GroupLayout(jPanel2);
        jPanel2.setLayout(jPanel2Layout);
        jPanel2Layout.setHorizontalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jPanelTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(51, 51, 51)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jLabel17)
                                .addGap(7, 7, 7)
                                .addComponent(lblSourceTables)
                                .addGap(309, 309, 309)
                                .addComponent(jLabel1)
                                .addGap(6, 6, 6)
                                .addComponent(lblDestTables))
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(30, 30, 30)
                                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(btnMoveSelected, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(btnMoveAll)
                                    .addComponent(btnMoveAllBack)
                                    .addComponent(btnMoveSelectedBack, javax.swing.GroupLayout.PREFERRED_SIZE, 60, javax.swing.GroupLayout.PREFERRED_SIZE))
                                .addGap(27, 27, 27)
                                .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 380, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(125, 125, 125)
                                .addComponent(btnTab2Next, javax.swing.GroupLayout.PREFERRED_SIZE, 120, javax.swing.GroupLayout.PREFERRED_SIZE))))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(23, 23, 23)
                        .addComponent(jLabel25)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(lblTableName)))
                .addContainerGap(129, Short.MAX_VALUE))
        );
        jPanel2Layout.setVerticalGroup(
            jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel2Layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLabel17)
                    .addComponent(lblSourceTables)
                    .addComponent(jLabel1)
                    .addComponent(lblDestTables))
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(8, 8, 8)
                        .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel2Layout.createSequentialGroup()
                                .addGap(50, 50, 50)
                                .addComponent(btnMoveSelected)
                                .addGap(19, 19, 19)
                                .addComponent(btnMoveAll)
                                .addGap(39, 39, 39)
                                .addComponent(btnMoveAllBack)
                                .addGap(19, 19, 19)
                                .addComponent(btnMoveSelectedBack))
                            .addComponent(jScrollPane2, javax.swing.GroupLayout.PREFERRED_SIZE, 300, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(jPanel2Layout.createSequentialGroup()
                        .addGap(114, 114, 114)
                        .addComponent(btnTab2Next, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(18, 18, 18)
                .addGroup(jPanel2Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel25)
                    .addComponent(lblTableName))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addComponent(jPanelTable, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("   Select Tables   ", jPanel2);

        jLabel18.setFont(new java.awt.Font("Tahoma", 1, 24)); // NOI18N
        jLabel18.setText("Destination Database Details");
        jLabel18.setToolTipText("Database to which to transfer data");

        jLabel19.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel19.setText("DBMS");

        cmbDestDbms.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        cmbDestDbms.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                cmbDestDbmsActionPerformed(evt);
            }
        });

        txtDestPortNo.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        jLabel20.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel20.setText("Port Number");

        jLabel21.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel21.setText("Hostname");

        txtDestHostname.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        txtDestHostname.setText("localhost");

        lblDestDatabaseName.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        lblDestDatabaseName.setText("Database name");

        txtDestDatabaseName.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N
        txtDestDatabaseName.setToolTipText("If you do not specify destination database name, then it will be same as source database name.");

        txtDestUsername.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        jLabel22.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel22.setText("Username");

        jLabel23.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel23.setText("Password");

        txtDestPassword.setFont(new java.awt.Font("Tahoma", 0, 20)); // NOI18N

        chkCreateDatabase.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        chkCreateDatabase.setSelected(true);
        chkCreateDatabase.setText("Create Database if not exists");

        btnTestDestConnection.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        btnTestDestConnection.setText("Test Connection");
        btnTestDestConnection.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTestDestConnectionActionPerformed(evt);
            }
        });

        lblTestDestConn.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        lblTestDestConn.setText("Not Connected");

        jLabel24.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        jLabel24.setText("Connection Status:");

        btnTab3Reset.setFont(new java.awt.Font("Tahoma", 1, 18)); // NOI18N
        btnTab3Reset.setText("Reset");
        btnTab3Reset.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnTab3ResetActionPerformed(evt);
            }
        });

        chkDropTables.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        chkDropTables.setSelected(true);
        chkDropTables.setText("Drop tables if exists with same name");

        btnMigrateTables.setFont(new java.awt.Font("Tahoma", 1, 20)); // NOI18N
        btnMigrateTables.setText("Proceed to Migrate Data");
        btnMigrateTables.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnMigrateTablesActionPerformed(evt);
            }
        });

        jProgressBar1.setStringPainted(true);

        javax.swing.GroupLayout jPanel3Layout = new javax.swing.GroupLayout(jPanel3);
        jPanel3.setLayout(jPanel3Layout);
        jPanel3Layout.setHorizontalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(73, 73, 73)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(txtDestPortNo, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addComponent(jLabel24)
                                    .addGap(18, 18, 18)
                                    .addComponent(lblTestDestConn))
                                .addGroup(jPanel3Layout.createSequentialGroup()
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addComponent(jLabel19)
                                        .addComponent(jLabel20)
                                        .addComponent(jLabel21)
                                        .addComponent(jLabel22)
                                        .addComponent(jLabel23)
                                        .addComponent(lblDestDatabaseName))
                                    .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                        .addGroup(jPanel3Layout.createSequentialGroup()
                                            .addGap(43, 43, 43)
                                            .addComponent(cmbDestDbms, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                                        .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                            .addComponent(chkCreateDatabase)
                                            .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                                .addComponent(txtDestHostname, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtDestUsername, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtDestPassword, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE)
                                                .addComponent(txtDestDatabaseName, javax.swing.GroupLayout.Alignment.TRAILING, javax.swing.GroupLayout.PREFERRED_SIZE, 350, javax.swing.GroupLayout.PREFERRED_SIZE))
                                            .addComponent(btnTestDestConnection, javax.swing.GroupLayout.PREFERRED_SIZE, 260, javax.swing.GroupLayout.PREFERRED_SIZE))))))
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(94, 94, 94)
                                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 401, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(chkDropTables)))
                            .addGroup(jPanel3Layout.createSequentialGroup()
                                .addGap(207, 207, 207)
                                .addComponent(btnTab3Reset, javax.swing.GroupLayout.PREFERRED_SIZE, 149, javax.swing.GroupLayout.PREFERRED_SIZE))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addComponent(btnMigrateTables, javax.swing.GroupLayout.PREFERRED_SIZE, 327, javax.swing.GroupLayout.PREFERRED_SIZE)
                                .addGap(47, 47, 47))))
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(194, 194, 194)
                        .addComponent(jLabel18)))
                .addContainerGap(158, Short.MAX_VALUE))
        );
        jPanel3Layout.setVerticalGroup(
            jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel3Layout.createSequentialGroup()
                .addGap(41, 41, 41)
                .addComponent(jLabel18)
                .addGap(49, 49, 49)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel19)
                    .addComponent(cmbDestDbms, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(26, 26, 26)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel20)
                    .addComponent(txtDestPortNo, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(25, 25, 25)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel21)
                            .addComponent(txtDestHostname, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(btnTab3Reset, javax.swing.GroupLayout.PREFERRED_SIZE, 53, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addGap(25, 25, 25)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDestUsername, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel22))
                .addGap(21, 21, 21)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel23)
                    .addComponent(txtDestPassword, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(24, 24, 24)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(txtDestDatabaseName, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(lblDestDatabaseName))
                .addGap(45, 45, 45)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(chkCreateDatabase)
                    .addComponent(chkDropTables))
                .addGap(28, 28, 28)
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(btnTestDestConnection, javax.swing.GroupLayout.PREFERRED_SIZE, 51, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(btnMigrateTables, javax.swing.GroupLayout.PREFERRED_SIZE, 43, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel3Layout.createSequentialGroup()
                        .addGap(41, 41, 41)
                        .addGroup(jPanel3Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLabel24)
                            .addComponent(lblTestDestConn)))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel3Layout.createSequentialGroup()
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(jProgressBar1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(202, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("   Migrate Data   ", jPanel3);

        jLabel3.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 60)); // NOI18N
        jLabel3.setText("Data Migration Application");

        jLabel4.setFont(new java.awt.Font("Arial Rounded MT Bold", 1, 50)); // NOI18N
        jLabel4.setText("version 1.1.0");

        jLabel5.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel5.setText("The application is a desktop based application developed in Java programming language.");

        jLabel6.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel6.setText("The application can migrate the data from one RDBMS software to another RDBMS software.");

        jLabel7.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel7.setText("Following Databases are supported by the application :");

        jLabel8.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel8.setText("●  Oracle");

        jLabel9.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel9.setText("●  MySQL");

        jLabel10.setFont(new java.awt.Font("Tahoma", 0, 24)); // NOI18N
        jLabel10.setText("●  Microsoft SQL Server");

        javax.swing.GroupLayout jPanel4Layout = new javax.swing.GroupLayout(jPanel4);
        jPanel4.setLayout(jPanel4Layout);
        jPanel4Layout.setHorizontalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(63, 63, 63)
                        .addGroup(jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addComponent(jLabel6)
                            .addComponent(jLabel5)
                            .addComponent(jLabel7)
                            .addComponent(jLabel8)
                            .addComponent(jLabel9)
                            .addComponent(jLabel10)))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(193, 193, 193)
                        .addComponent(jLabel3))
                    .addGroup(jPanel4Layout.createSequentialGroup()
                        .addGap(453, 453, 453)
                        .addComponent(jLabel4)))
                .addContainerGap(218, Short.MAX_VALUE))
        );
        jPanel4Layout.setVerticalGroup(
            jPanel4Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel4Layout.createSequentialGroup()
                .addGap(49, 49, 49)
                .addComponent(jLabel3)
                .addGap(52, 52, 52)
                .addComponent(jLabel4)
                .addGap(53, 53, 53)
                .addComponent(jLabel5)
                .addGap(30, 30, 30)
                .addComponent(jLabel6)
                .addGap(36, 36, 36)
                .addComponent(jLabel7)
                .addGap(18, 18, 18)
                .addComponent(jLabel8)
                .addGap(18, 18, 18)
                .addComponent(jLabel9)
                .addGap(18, 18, 18)
                .addComponent(jLabel10)
                .addContainerGap(275, Short.MAX_VALUE))
        );

        jTabbedPane.addTab("   About   ", jPanel4);

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addComponent(jTabbedPane, javax.swing.GroupLayout.DEFAULT_SIZE, 888, Short.MAX_VALUE)
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void btnTab1NextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTab1NextActionPerformed
        // Validate database name
        if(sourceDbms != DBMS.ORACLE){
            if(sourceDatabasename == null || sourceDatabasename.isEmpty()){
                JOptionPane.showMessageDialog(this, "Please select Source Database Name.", "Warning", JOptionPane.WARNING_MESSAGE);
                cmbSourceDatabaseNames.requestFocus();
                return;
            }
        }

        // Clear Destination Tables ListBox
        sourceTablesListModel.removeAllElements();
        destTablesListModel.removeAllElements();
        lblDestTables.setText(String.valueOf(0));
        if(sourceConn != null){
            fetchTables(sourceConn);
            jTabbedPane.setSelectedIndex(1);
        }else{
            sourceTablesListModel.removeAllElements();
            lblSourceTables.setText(String.valueOf(0));
            JOptionPane.showMessageDialog(this, "Please connect to Source Database to proceed.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_btnTab1NextActionPerformed

    private void cmbSourceDbmsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSourceDbmsActionPerformed
        try{
            if(cmbSourceDbms.getSelectedIndex() != -1) {
                String dbms = cmbSourceDbms.getSelectedItem().toString();
                sourceDbms = getDbmsFromString(dbms);
                txtSourcePortNo.setText(String.valueOf(getDbmsDefaultPortNo(sourceDbms)));
                txtSourceUsername.setText(getDbmsDefaultUsername(sourceDbms));
                if(sourceDbms == DBMS.ORACLE){
                    lblSourceDatabaseName.setVisible(false);
                    cmbSourceDatabaseNames.setVisible(false);
                }else{
                    lblSourceDatabaseName.setVisible(true);
                    cmbSourceDatabaseNames.setVisible(true);
                }
            }
        }
        catch(Exception ex){
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cmbSourceDbmsActionPerformed

    private int getDbmsFromString(String dbms) throws DatabaseNotSupportedException{
        switch(dbms){
            case "Oracle":
                return DBMS.ORACLE;
            case "MySQL":
                return DBMS.MYSQL;
            case "Microsoft SQL Server":
                return DBMS.MS_SQL_SERVER;
            default:
                throw new DatabaseNotSupportedException(dbms + " is not supported by this application.");
        }
    }
    
    private void btnTestSourceConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestSourceConnectionActionPerformed
        setSourceData();
        if(validateSourceData()){
            sourceConn = getConnection(sourceDbms, sourceHostname, sourcePortNo, null, sourceUsername, sourcePassword);
            if(sourceConn != null){
                try {
                    sourceStmt = sourceConn.createStatement();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    error = true;
                }
                lblTestSourceConn.setText("Success");
                lblTestSourceConn.setForeground(new Color(85, 166, 48));
                // If database is not Oracle, then fetch database names and fill in ComboBox
                if(sourceDbms != DBMS.ORACLE){
                    try{
                        dbmd = sourceConn.getMetaData();
                        ResultSet rs = dbmd.getCatalogs();
                        cmbSourceDatabaseNames.removeAllItems();
                        int count = 0;
                        ArrayList<String> databaseNames = new ArrayList<>();
                        while(rs.next()){
                            databaseNames.add(rs.getString(1));
                            count++;
                        }
                        rs.close();
                        for(String dbName : databaseNames){
                            cmbSourceDatabaseNames.addItem(dbName);
                        }
                        if(count == 0){
                            JOptionPane.showMessageDialog(this, "No Databases found to migrate data.", "Warning", JOptionPane.WARNING_MESSAGE);
                        }
                    }
                    catch(SQLException ex){
                        JOptionPane.showMessageDialog(this, "Unable to fetch list of Databases.", "Error", JOptionPane.ERROR_MESSAGE);                        
                    }
                }
            }else{
                cmbSourceDatabaseNames.removeAllItems();
                lblTestSourceConn.setText("Failed");
                lblTestSourceConn.setForeground(Color.RED);
                destTablesListModel.removeAllElements();
                lblDestTables.setText(String.valueOf(0));
                error = true;
            }
        }else{
            lblTestSourceConn.setText("Failed");
            lblTestSourceConn.setForeground(Color.RED);
            error = true;
        }
    }//GEN-LAST:event_btnTestSourceConnectionActionPerformed

    private void formWindowClosing(java.awt.event.WindowEvent evt) {//GEN-FIRST:event_formWindowClosing
        closeDatabaseConnections();
    }//GEN-LAST:event_formWindowClosing

    private void closeDatabaseConnections() {
        try{
            if(sourceConn != null){
                sourceStmt.close();
                sourceConn.close();
            }
            if(destConn != null){
                destStmt.close();
                destConn.close();
            }
            System.out.println("Process completed...");
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            error = true;
        }
    }

    private void btnMoveSelectedActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveSelectedActionPerformed
        // For multiple items
        int[] selectedIndices = listSourceTables.getSelectedIndices();
        if(selectedIndices.length > 0){
            for(int i : selectedIndices){
                destTablesListModel.addElement(sourceTablesListModel.getElementAt(i));
            }
            // Sort Array in descending order
            sortIntArrayDescending(selectedIndices);
            for(int i : selectedIndices){
                sourceTablesListModel.remove(i);
            }
            lblDestTables.setText(String.valueOf(destTablesListModel.size()));
            lblSourceTables.setText(String.valueOf(sourceTablesListModel.size()));
        }else{
            JOptionPane.showMessageDialog(this, "Please select item from source tables list.", "Warning", JOptionPane.WARNING_MESSAGE);
            error = true;
        }
        jProgressBar1.setValue(0);
    }//GEN-LAST:event_btnMoveSelectedActionPerformed

    private void btnMoveAllActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveAllActionPerformed
        int size = sourceTablesListModel.size();
        for(int i = 0; i < size; i++){
            destTablesListModel.addElement(sourceTablesListModel.get(i));
        }
        sourceTablesListModel.removeAllElements();
        lblSourceTables.setText(String.valueOf(0));
        lblDestTables.setText(String.valueOf(destTablesListModel.size()));
        jProgressBar1.setValue(0);
    }//GEN-LAST:event_btnMoveAllActionPerformed

    private void btnMoveAllBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveAllBackActionPerformed
        int size = destTablesListModel.size();
        for(int i = 0; i < size; i++){
            sourceTablesListModel.addElement(destTablesListModel.get(i));
        }
        destTablesListModel.removeAllElements();
        lblDestTables.setText(String.valueOf(0));
        lblSourceTables.setText(String.valueOf(sourceTablesListModel.size()));
        jProgressBar1.setValue(0);
    }//GEN-LAST:event_btnMoveAllBackActionPerformed

    private void btnMoveSelectedBackActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMoveSelectedBackActionPerformed
        int[] selectedIndices = listDestTables.getSelectedIndices();
        if(selectedIndices.length > 0){
            for(int i : selectedIndices){
                sourceTablesListModel.addElement(destTablesListModel.getElementAt(i));
            }
            sortIntArrayDescending(selectedIndices);
            for(int i : selectedIndices){
                destTablesListModel.remove(i);
            }
            lblDestTables.setText(String.valueOf(destTablesListModel.size()));
            lblSourceTables.setText(String.valueOf(sourceTablesListModel.size()));
        }else{
            JOptionPane.showMessageDialog(this, "Please select item from destination tables list.", "Warning", JOptionPane.WARNING_MESSAGE);
            error = true;
        }
        jProgressBar1.setValue(0);
    }//GEN-LAST:event_btnMoveSelectedBackActionPerformed

    private void cmbDestDbmsActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbDestDbmsActionPerformed
        try{
            if(cmbDestDbms.getSelectedIndex() != -1) {
                String dbms = cmbDestDbms.getSelectedItem().toString();
                destDbms = getDbmsFromString(dbms);
                txtDestPortNo.setText(String.valueOf(getDbmsDefaultPortNo(destDbms)));
                txtDestUsername.setText(getDbmsDefaultUsername(destDbms));
                if(destDbms == DBMS.ORACLE){
                    chkCreateDatabase.setVisible(false);
                    lblDestDatabaseName.setVisible(false);
                    txtDestDatabaseName.setVisible(false);
                }else{
                    chkCreateDatabase.setVisible(true);
                    lblDestDatabaseName.setVisible(true);
                    txtDestDatabaseName.setVisible(true);
                }
            }
        }
        catch(Exception ex){
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_cmbDestDbmsActionPerformed

    private void btnTestDestConnectionActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTestDestConnectionActionPerformed
        setDestData();
        if(destDatabasename == null || destDatabasename.length() == 0){
            if(sourceDbms == DBMS.ORACLE){
                destDatabasename = "OracleDB";
                txtDestDatabaseName.setText(destDatabasename);
            }else{
                destDatabasename = sourceDatabasename;
                txtDestDatabaseName.setText(destDatabasename);
            }
        }
        if(validateDestData()){
            destConn = getConnectionWithoutErrorMessage(destDbms, destHostname, destPortNo, destDatabasename, destUsername, destPassword);
            if(destConn != null){
                try {
                    destStmt = destConn.createStatement();
                } catch (SQLException ex) {
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                    error = true;
                }
                lblTestDestConn.setText("Success");
                lblTestDestConn.setForeground(new Color(85, 166, 48));
            }else{
                lblTestDestConn.setText("Failed");
                lblTestDestConn.setForeground(Color.RED);
                // Create Database if 'chkCreateDatabase' is checked, and again establish connection
                if(chkCreateDatabase.isSelected()){
                    sql = "CREATE DATABASE " + destDatabasename;
                    System.out.println("\nSQL : " + sql + ";");
                    // Pass NULL instead of database name
                    destConn = getConnection(destDbms, destHostname, destPortNo, null, destUsername, destPassword);
                    if(destConn != null){
                        try {
                            destStmt = destConn.createStatement();
                            destStmt.execute(sql);  // CREATE DATABASE
                            destStmt.close();
                            destConn.close();
                            System.out.println("Database created successfully.");
                            destConn = getConnection(destDbms, destHostname, destPortNo, destDatabasename, destUsername, destPassword);
                            if(destConn != null){
                                destStmt = destConn.createStatement();
                                lblTestDestConn.setText("Success");
                                lblTestDestConn.setForeground(new Color(85, 166, 48));
                            }
                        } catch (SQLException ex) {
                            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                            error = true;
                        }
                    }else{
                        JOptionPane.showMessageDialog(this, "Database connection cannot be established.", "Error", JOptionPane.ERROR_MESSAGE);
                    }
                } else {
                    JOptionPane.showMessageDialog(this, "Database not found. Please check \"Create Database if not exists\" option to automatically create database.", "Error", JOptionPane.ERROR_MESSAGE);
                }
            }
        }else{
            lblTestDestConn.setText("Failed");
            lblTestDestConn.setForeground(Color.RED);
            error = true;
        }
    }//GEN-LAST:event_btnTestDestConnectionActionPerformed

    private void btnTab3ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTab3ResetActionPerformed
        // Close all Connections and Statements
        closeDatabaseConnections();
        jProgressBar1.setValue(0);
        lblTestSourceConn.setText("Not Connected");
        lblTestSourceConn.setForeground(Color.BLACK);
        sourceConn = null;
        sourceStmt = null;
        sourceTablesListModel.removeAllElements();
        lblSourceTables.setText(String.valueOf(0));
        // Reset destination database parameters
        cmbDestDbms.setSelectedIndex(-1);
        txtDestPortNo.setText("");
        txtDestHostname.setText("");
        txtDestDatabaseName.setText("");
        txtDestUsername.setText("");
        txtDestPassword.setText("");
        chkCreateDatabase.setVisible(true);
        lblDestDatabaseName.setVisible(true);
        txtDestDatabaseName.setVisible(true);
        lblTestDestConn.setText("Not Connected");
        lblTestDestConn.setForeground(Color.BLACK);
        sourceConn = null;
        sourceStmt = null;
        destTablesListModel.removeAllElements();
        lblDestTables.setText(String.valueOf(0));
        chkCreateDatabase.setSelected(true);
        chkDropTables.setSelected(true);
        // Close Database connections
        closeDatabaseConnections();
        error = false;
    }//GEN-LAST:event_btnTab3ResetActionPerformed

    private void btnMigrateTablesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnMigrateTablesActionPerformed
        jProgressBar1.setValue(0);
        if(destTablesListModel.size() == 0){
            JOptionPane.showMessageDialog(this, "Please move at least 1 table to destination Tables List", "No Table Selected", JOptionPane.WARNING_MESSAGE);
            jTabbedPane.setSelectedIndex(1);
            return;
            
        }

        if(sourceConn == null){
            fetchTables(sourceConn);
            return;
        }
        else if (destConn == null){
            btnTestDestConnection.doClick();
        }

        migrateData();

        if(!error){
            // Using Swing Worker (to not to block the EDT - Event Dispatch Thread)
            ProgressWorker pw = new ProgressWorker();
            pw.addPropertyChangeListener(new PropertyChangeListener() {
                @Override
                public void propertyChange(PropertyChangeEvent evt) {
                    String name = evt.getPropertyName();
                    if (name.equals("progress")) {
                        int progress = (int) evt.getNewValue();
                        jProgressBar1.setValue(progress);
                        repaint();
                    } 
                    else if (name.equals("state")) {
                        SwingWorker.StateValue state = (SwingWorker.StateValue) evt.getNewValue();
                        switch (state) {
                            case DONE:
                                if(error){
                                    JOptionPane.showMessageDialog(rootPane, errorMessage, "Error", JOptionPane.ERROR_MESSAGE);
                                }else{
                                    JOptionPane.showMessageDialog(rootPane, "Data migrated successfully.", "Success", JOptionPane.INFORMATION_MESSAGE);   
                                }
                                break;
                        }
                    }
                }
            });
            pw.execute();
        }
    }//GEN-LAST:event_btnMigrateTablesActionPerformed

    private void jPanel2FocusGained(java.awt.event.FocusEvent evt) {//GEN-FIRST:event_jPanel2FocusGained
        sourceTablesListModel.removeAllElements();
        destTablesListModel.removeAllElements();
        lblDestTables.setText(String.valueOf(0));
        btnTestSourceConnection.doClick();
        if(sourceConn != null){
            fetchTables(sourceConn);
        }else{
            sourceTablesListModel.removeAllElements();
            lblSourceTables.setText(String.valueOf(0));
        }
    }//GEN-LAST:event_jPanel2FocusGained

    private void btnTab2NextActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTab2NextActionPerformed
        if(destTablesListModel.size() == 0){
            JOptionPane.showMessageDialog(this, "Please move at least 1 table to destination Tables List", "No Table Selected", JOptionPane.WARNING_MESSAGE);
            return;
        }
        jTabbedPane.setSelectedIndex(2);
    }//GEN-LAST:event_btnTab2NextActionPerformed

    private void listSourceTablesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listSourceTablesValueChanged
        if(!evt.getValueIsAdjusting()){
            String tableName = listSourceTables.getSelectedValue();
            if(tableName != null){
                displayDataFromTable(tableName);
            }
        }
    }//GEN-LAST:event_listSourceTablesValueChanged

    private void displayDataFromTable(String tableName){
        try{
            if(sourceConn != null){
                sql = "SELECT * FROM " + tableName;
                rs = sourceStmt.executeQuery(sql);
                ResultSetMetaData rsmd = rs.getMetaData();
                final int columnCount = rsmd.getColumnCount();
                String[] columnNames = new String[columnCount];
                for(int i=1; i <= columnCount; i++){
                    columnNames[i-1] = rsmd.getColumnName(i);
                }
                DefaultTableModel model = new MyDefaultTableModel();
                // Set Column Names
                model.setColumnIdentifiers(columnNames);
                int rowsCount = 0;
                while(rs.next()){
                    Object[] rowData = new Object[columnCount];
                    for(int i=1; i <= columnCount; i++){
                        rowData[i-1] = rs.getObject(i);
                    }
                    model.addRow(rowData);
                    rowsCount++;
                }
                lblTableName.setText(tableName + "  (No of records : " + rowsCount + ")");
                // Set Model for JTable
                jTable.setModel(model);
            }
        }
        catch(SQLException ex){
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
        catch(Exception ex){
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    class MyDefaultTableModel extends DefaultTableModel {

        @Override
        public boolean isCellEditable(int row, int column) {
            return false;
        }
        
    }
    
    private void btnTab1ResetActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnTab1ResetActionPerformed
        cmbSourceDbms.setSelectedIndex(-1);
        txtSourcePortNo.setText("");
        txtSourceHostname.setText("");
        cmbSourceDatabaseNames.setSelectedIndex(-1);
        txtSourceUsername.setText("");
        txtSourcePassword.setText("");
        lblSourceDatabaseName.setVisible(true);
        cmbSourceDatabaseNames.setVisible(true);
    }//GEN-LAST:event_btnTab1ResetActionPerformed

    private void listDestTablesValueChanged(javax.swing.event.ListSelectionEvent evt) {//GEN-FIRST:event_listDestTablesValueChanged
        if(!evt.getValueIsAdjusting()){
            String tableName = listDestTables.getSelectedValue();
            if(tableName != null){
                displayDataFromTable(tableName);
            }
        }
    }//GEN-LAST:event_listDestTablesValueChanged

    private void jTableMouseClicked(java.awt.event.MouseEvent evt) {//GEN-FIRST:event_jTableMouseClicked
        if (evt.getClickCount() > 1) {
            JOptionPane.showMessageDialog(this, "Sorry! You cannot edit the data of Table.", "Warning", JOptionPane.WARNING_MESSAGE);
        }
    }//GEN-LAST:event_jTableMouseClicked

    private void cmbSourceDatabaseNamesActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_cmbSourceDatabaseNamesActionPerformed
        // Get new connection with Database
        if(cmbSourceDatabaseNames.getSelectedIndex() != -1) {
            sourceDatabasename = cmbSourceDatabaseNames.getSelectedItem().toString();
            // Close connection if already exists
            try{
                if(sourceConn != null){
                    sourceStmt.close();
                    sourceConn.close();
                }
            }catch(SQLException ex){
                // Ignore the error
            }
            sourceConn = getConnection(sourceDbms, sourceHostname, sourcePortNo, sourceDatabasename, sourceUsername, sourcePassword);
            if(sourceConn != null){
                try{
                    sourceStmt = sourceConn.createStatement();
                }
                catch(SQLException ex){
                    JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                }
            }else{
                JOptionPane.showMessageDialog(this, "Database connection cannot be established.", "Error", JOptionPane.ERROR_MESSAGE);
            }
        }else{
            sourceDatabasename = "";
        }
    }//GEN-LAST:event_cmbSourceDatabaseNamesActionPerformed

    public class ProgressWorker extends SwingWorker<Object, Object> {
        @Override
        protected Object doInBackground() throws Exception {
            for (int i = 20; i <= 100; i = i + 2) {        
                setProgress(i);
                try {
                    Thread.sleep(50);
                } catch (Exception ex) {
                    // Ignore the error
                }
            }
            return null;
        }
    }
    
    public void migrateData(){
        if(destTablesListModel.size() > 0){
            try{
                dbmd = destConn.getMetaData();
            }catch(SQLException ex){
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            }
            // Code to migrate table data
            int size = destTablesListModel.size();
            try{
                List<String> destTablesList = fetchTablesWithoutErrorMessage(destConn);
//                System.out.println("Existing Tables : ");
//                System.out.println(destTablesList);
                for(int j = 0; j < size; j++){
                    String tableName = destTablesListModel.get(j).toString();
                    // DROP existing table if checkbox selected
                    if(chkDropTables.isSelected()){
                        sql = getDropTableQuery(destDbms, dbmd, tableName);
                        System.out.println("\nSQL : " + sql + ";");
                        try{
                            destStmt.execute(sql);
                        }catch(SQLException ex){
                            // Ignore error if table doesn't exists
                        }
                    }
                    // Select records from source database
                    sql = "SELECT * FROM " + tableName;
                    String[] primaryKeyColumns = getPrimaryKeyColumns(tableName);
                    rs = sourceStmt.executeQuery(sql);
                    rsmd = rs.getMetaData();
                    sql = getCreateTableQuery(dbmd, rsmd, destDbms, tableName, primaryKeyColumns);
                    if(sql != null){
                        // Append Extra char if tableName is a keyword
                        if(!queryGenerator.checkValidColumnName(tableName, dbmd.getSQLKeywords().split(","))){
                            tableName = tableName + QueryGenerator.EXTRA_CHAR;
                        }
                        // Execute "CREATE TABLE" query if table not exists with same name
                        if(!destTablesList.stream().anyMatch(tableName::equalsIgnoreCase) || chkDropTables.isSelected()){  // Case-insensitive
                            // Execute Create Table Query
                            System.out.println("\nSQL : " + sql + ";");
                            destStmt.execute(sql);
                        }
                        // Set IDENTITY INSERT to ON before inserting records if Database is SQL Server
                        boolean setted = false;
                        if(destDbms == DBMS.MS_SQL_SERVER){
                            try{
                                sql = "SET IDENTITY_INSERT " + tableName + " ON";
                                destStmt.execute(sql);
                                setted = true;
                            }catch(Exception ex){
                                // Ignore error if any
                            }
                        }
                        // Insert current table records from source table to dest table
                        boolean result = insertRecords(tableName);
                        if(!result){
                            error = true;
                        }
                        // Set IDENTITY INSERT to OFF after inserting records if Database is SQL Server
                        if(destDbms == DBMS.MS_SQL_SERVER && setted){
                            try{
                                sql = "SET IDENTITY_INSERT " + tableName + " OFF";
                                destStmt.execute(sql);
                            }catch(Exception ex){
                                // Ignore error if any
                            }
                        }
                    }else{
                        // Failed to generate "CREATE TABLE" query
                        JOptionPane.showMessageDialog(this, errorMessage, "Error", JOptionPane.ERROR_MESSAGE);
                    }
                }
                error = false;
                rs.close();
                destPrepStmt.close();
            }
            catch(SQLException ex){
                JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
                error = true;
            }
        } else {
            JOptionPane.showMessageDialog(this, "There is no table in destination tables list. Please add table from source tables list.", "Warning", JOptionPane.WARNING_MESSAGE);
            error = true;
        }
    }
    
    private boolean insertRecords(String tableName){
        try {
            // CREATE Prepared Statement
            StringBuffer columnNames = new StringBuffer();
            StringBuffer columnParams = new StringBuffer();
            int columnCount = rsmd.getColumnCount();
            for(int i=1; i <= columnCount; i++){
                // QueryGenerator is already setted via "getCreateTableQuery" method
                if(queryGenerator.checkValidColumnName(rsmd.getColumnName(i), dbmd.getSQLKeywords().split(","))){
                    columnNames.append(rsmd.getColumnName(i)).append((i < columnCount) ? "," : "");
                }else{
                    columnNames.append(rsmd.getColumnName(i)).append((i < columnCount) ? QueryGenerator.EXTRA_CHAR + "," : QueryGenerator.EXTRA_CHAR);
                }
                columnParams.append("?").append((i < columnCount) ? "," : "");
            }
            sql = String.format("INSERT INTO %s (%s) VALUES (%s)", tableName, columnNames.toString(), columnParams.toString());
            System.out.println("\nSQL : " + sql + ";");
            destPrepStmt = destConn.prepareStatement(sql);
            // Set Parameters and execute Prepared Statement
            while(rs.next()){
                // Set Parameters
                for(int i=1; i <= columnCount; i++){
                    setParamForRespectiveDataType(destPrepStmt, i, rs, rsmd.getColumnType(i));
                }
                destPrepStmt.executeUpdate();
            }
            return true;
        }
        catch(SQLIntegrityConstraintViolationException ex){
            error = true;
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        catch(SQLSyntaxErrorException ex){
            error = true;
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
        catch(SQLException ex){
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            return false;
        }
    }
    
    private void setParamForRespectiveDataType(PreparedStatement pstmt, int index, ResultSet rs, int columnDataType) {
        try {
            switch(columnDataType){
                case Types.BIT:
                    pstmt.setBoolean(index, rs.getBoolean(index));
                    break;
                case Types.BOOLEAN:
                    pstmt.setBoolean(index, rs.getBoolean(index));
                    break;
                case Types.TINYINT:
//                    pstmt.setByte(index, rs.getByte(index));
                    pstmt.setShort(index, rs.getShort(index));
                    break;
                case Types.SMALLINT:
                    pstmt.setShort(index, rs.getShort(index));
                    break;
                case Types.INTEGER:
                    pstmt.setInt(index, rs.getInt(index));
                    break;
                case Types.BIGINT:
                    pstmt.setLong(index, rs.getLong(index));
                    break;
                case Types.FLOAT:
                    pstmt.setFloat(index, rs.getFloat(index));
                    break;
                case Types.REAL:
                    pstmt.setFloat(index, rs.getFloat(index));
                    break;
                case Types.DOUBLE:
                    pstmt.setDouble(index, rs.getDouble(index));
                    break;
                case Types.NUMERIC:
                    pstmt.setBigDecimal(index, rs.getBigDecimal(index));
                    break;
                case Types.DECIMAL:
                    pstmt.setBigDecimal(index, rs.getBigDecimal(index));
                    break;
                case Types.CHAR:
                    pstmt.setString(index, rs.getString(index));
                    break;
                case Types.VARCHAR:
                    pstmt.setString(index, rs.getString(index));
                    break;
                case Types.LONGVARCHAR:
                    pstmt.setString(index, rs.getString(index));
                    break;
                case Types.DATE:
                    pstmt.setDate(index, rs.getDate(index));
                    break;
                case Types.TIME:
                    pstmt.setTime(index, rs.getTime(index));
                    break;
                case Types.TIMESTAMP:
                    pstmt.setTimestamp(index, rs.getTimestamp(index));
                    break;
                case Types.BINARY:
                    pstmt.setBytes(index, rs.getBytes(index));
                    break;
                case Types.VARBINARY:
                    pstmt.setBytes(index, rs.getBytes(index));
                    break;
                case Types.LONGVARBINARY:
                    pstmt.setBytes(index, rs.getBytes(index));
                    break;   
                case Types.NULL:
                    pstmt.setNull(index, Types.NULL);
                    break;
                case Types.OTHER:
                    pstmt.setString(index, rs.getString(index));
                    break;
                case Types.JAVA_OBJECT:
                    pstmt.setObject(index, rs.getObject(index));
                    break;
//                case Types.DISTINCT:
//                    break;
//                case Types.STRUCT:
//                    break;
                case Types.ARRAY:
                    pstmt.setArray(index, rs.getArray(index));
                    break;
                case Types.BLOB:
                    pstmt.setBlob(index, rs.getBlob(index));
                    break;
                case Types.CLOB:
                    pstmt.setClob(index, rs.getClob(index));
                    break;
                case Types.REF:
                    pstmt.setRef(index, rs.getRef(index));
                    break;
//                case Types.DATALINK:
//                    break;
                case Types.ROWID:
                    pstmt.setRowId(index, rs.getRowId(index));
                    break;
                case Types.NCHAR:
                    pstmt.setNString(index, rs.getNString(index));
                    break;
                case Types.NVARCHAR:
                    pstmt.setNString(index, rs.getNString(index));
                    break;
                case Types.LONGNVARCHAR:
                    pstmt.setNString(index, rs.getNString(index));
                    break;
                case Types.NCLOB:
                    pstmt.setNClob(index, rs.getNClob(index));
                    break;
                case Types.SQLXML:
                    pstmt.setSQLXML(index, rs.getSQLXML(1));
                    break;
//                case Types.REF_CURSOR:
//                    break;
                case Types.TIME_WITH_TIMEZONE:
                    pstmt.setTime(index, rs.getTime(index));
                    break;
                case Types.TIMESTAMP_WITH_TIMEZONE:
                    pstmt.setTimestamp(index, rs.getTimestamp(index));
                    break;                  
                default:
                    pstmt.setString(index, rs.getString(index));
            }
        }
        catch(SQLException ex){
            JOptionPane.showMessageDialog(this, "Data Type Conversion Error : " + ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            error = true;
        }
    }
    
    private String getCreateTableQuery(DatabaseMetaData dbmd, ResultSetMetaData rsmd, Integer dbms, String tableName, String[] primaryKeyColumns){
        queryGenerator = null;
        setQueryGenerator(dbms);
        if(queryGenerator != null){
            return queryGenerator.generateCreateTableQuery(dbmd, rsmd, tableName, primaryKeyColumns);
        }else {
            return null;
        }
    }
    
    private void setQueryGenerator(int dbms) {
        switch(dbms){
            case DBMS.ORACLE:
                queryGenerator = new OracleQueryGenerator();
                break;
            case DBMS.MYSQL:
                queryGenerator = new MysqlQueryGenerator();
                break;
            case DBMS.MS_SQL_SERVER:
                queryGenerator = new SqlServerQueryGenerator();
                break;
            default:
                JOptionPane.showMessageDialog(this, "DBMS not supported.", "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    private String[] getPrimaryKeyColumns(String tableName){
        String[] primaryKeyColumns = new String[10];  // Assume that Primary Key can be of max 10 columns
        int i = 0;
        try{
            DatabaseMetaData metaData = sourceConn.getMetaData();
            String catalog = sourceDatabasename;
            // In case of Oracle, sourceDatabasename will be null
            if(sourceDatabasename == null || sourceDatabasename.isEmpty()){
                catalog = null;
            }
            //Retrieving the columns in the database
//            ResultSet getPrimaryKeys(String catalog, String schema, String table) throws SQLException;
            ResultSet rs = metaData.getPrimaryKeys(catalog, null, tableName);
            while(rs.next()){
                primaryKeyColumns[i++] = rs.getString("COLUMN_NAME");
            }
            String[] newArray = new String[i];
            for(int j=0; j < i; j++){
                newArray[j] = primaryKeyColumns[j];
            }
            // Use "Set" to remove duplicate elements
            Set<String> mySet = new HashSet<String>(Arrays.asList(newArray));
            String[] primaryKeysArray = mySet.toArray(new String[0]);
            return primaryKeysArray;
        }catch(SQLException ex){
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            error = true;
            return new String[]{};
        }
    }
    
    private String getDropTableQuery(int dbms, DatabaseMetaData dbmd, String tableName){
        queryGenerator = null;
        switch(dbms){
            case DBMS.ORACLE:
                queryGenerator = new OracleQueryGenerator();
                break;
            case DBMS.MYSQL:
                queryGenerator = new MysqlQueryGenerator();
                break;
            case DBMS.MS_SQL_SERVER:
                queryGenerator = new SqlServerQueryGenerator();
                break;
            default:
                JOptionPane.showMessageDialog(this, "DBMS not supported.", "Error", JOptionPane.ERROR_MESSAGE);
                return null;
        }
        return queryGenerator.generateDropTableQuery(dbmd, tableName);
    }
    
    /* Custom Methods */
    private void sortIntArrayDescending(int[] arr){
        int len = arr.length;
        int temp;
        for(int i=0; i < len; i++){
            for(int j=i+1; j < len; j++){
                if(arr[i] < arr[j]){
                    temp = arr[i];
                    arr[i] = arr[j];
                    arr[j] = temp;
                }
            }
        }
    }
    
    private void fillDbmsCombobox(JComboBox cmb){
        cmb.removeAllItems();
        for(int i=0, len = dbmsList.length; i < len; i++){
            cmb.addItem(dbmsList[i]);
        }
    }
    
    public void setSourceData(){
        try {
            String dbms = cmbSourceDbms.getSelectedItem().toString();
            sourceDbms = getDbmsFromString(dbms);
            try{
                sourcePortNo = Integer.parseInt(txtSourcePortNo.getText());
            }catch(Exception ex){
                sourcePortNo = 0;
                JOptionPane.showMessageDialog(this, "Please enter valid Port Number for Source Database.", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            sourceHostname = txtSourceHostname.getText();
            sourceUsername = txtSourceUsername.getText();
            sourcePassword = String.valueOf(txtSourcePassword.getPassword());
        } catch(Exception ex){
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            error = true;
        }
    }
    
    public void setDestData(){
        try {
            String dbms = cmbDestDbms.getSelectedItem().toString();
            destDbms = getDbmsFromString(dbms);
            try{
                destPortNo = Integer.parseInt(txtDestPortNo.getText());
            }catch(Exception ex){
                destPortNo = 0;
                JOptionPane.showMessageDialog(this, "Please enter valid Port Number for Destination Database.", "Warning", JOptionPane.WARNING_MESSAGE);
            }
            destHostname = txtDestHostname.getText();
            destUsername = txtDestUsername.getText();
            destPassword = String.valueOf(txtDestPassword.getPassword());
            destDatabasename = txtDestDatabaseName.getText();
        } catch(Exception ex){
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            error = true;
        }
    }
    
    public boolean validateSourceData(){
        boolean result = true;
        if(cmbSourceDbms.getSelectedIndex() == -1){
            JOptionPane.showMessageDialog(this, "Please select Source DBMS.", "Warning", JOptionPane.WARNING_MESSAGE);
            cmbSourceDbms.requestFocus();
            result = false;
        }
        else if(txtSourcePortNo.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter Source Database Port Number.", "Warning", JOptionPane.WARNING_MESSAGE);
            txtSourcePortNo.requestFocus();
            result = false;
        }
        else if(txtSourceHostname.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter Source Database Hostname of server.", "Warning", JOptionPane.WARNING_MESSAGE);
            txtSourceHostname.requestFocus();
            result = false;
        }
        else if(txtSourceUsername.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter Source Database Username.", "Warning", JOptionPane.WARNING_MESSAGE);
            txtSourceUsername.requestFocus();
            result = false;
        }
        else if(txtSourcePassword.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter Source Database User Password.", "Warning", JOptionPane.WARNING_MESSAGE);
            txtSourcePassword.requestFocus();
            result = false;
        }
        jProgressBar1.setValue(0);
        return result;
    }
    
    public boolean validateDestData(){
        boolean result = true;
        if(cmbDestDbms.getSelectedIndex() == -1){
            JOptionPane.showMessageDialog(this, "Please select Destination DBMS.", "Warning", JOptionPane.WARNING_MESSAGE);
            cmbDestDbms.requestFocus();
            result = false;
        }
        else if(txtDestPortNo.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter Destination Database Port Number.", "Warning", JOptionPane.WARNING_MESSAGE);
            txtDestPortNo.requestFocus();
            result = false;
        }
        else if(txtDestHostname.getText().isEmpty()){
            JOptionPane.showMessageDialog(this, "Please enter Destination Database Hostname of server.", "Warning", JOptionPane.WARNING_MESSAGE);
            txtDestHostname.requestFocus();
            result = false;
        }
        else if(!cmbDestDbms.getSelectedItem().toString().equals("Microsoft SQL Server")){
            if(txtDestUsername.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "Please enter Destination Database Username.", "Warning", JOptionPane.WARNING_MESSAGE);
                txtDestUsername.requestFocus();
                result = false;
            }
        }
        else if(!cmbDestDbms.getSelectedItem().toString().equals("Microsoft SQL Server")){
            if(txtDestPassword.getText().isEmpty()){
                JOptionPane.showMessageDialog(this, "Please enter Destination Database User Password.", "Warning", JOptionPane.WARNING_MESSAGE);
                txtDestPassword.requestFocus();
                result = false;
            }
        }
        jProgressBar1.setValue(0);
        return result;
    }
    
    private Connection getConnection (Integer dbms, String hostname, int portNo, String databaseName, String username, String password){
        try {
            String connString = getConnectionString(dbms, hostname, portNo, databaseName);
            System.out.println("Connecting to database using :");
            System.out.println("Conn String : " + connString);
            System.out.println("Username : " + username);
            Connection conn = DriverManager.getConnection(connString, username, password);
            if(conn != null){
                error = false;
                return conn;
            }
            return null;
        } catch(Exception ex){
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
            error = true;
            return null;
        }
    }
    
    // Get Connection Silently
    private Connection getConnectionWithoutErrorMessage (Integer dbms, String hostname, int portNo, String databaseName, String username, String password){
        try {
            String connString = getConnectionString(dbms, hostname, portNo, databaseName);
            Connection conn = DriverManager.getConnection(connString, username, password);
            if(conn != null){
                return conn;
            }
            return null;
        } catch(Exception ex){
            return null;
        }
    }
    
    private int getDbmsDefaultPortNo (int dbms){
        switch(dbms){
            case DBMS.ORACLE:
                return Constants.ORACLE_PORT;
            case DBMS.MYSQL:
                return Constants.MYSQL_PORT;
            case DBMS.MS_SQL_SERVER:
                return Constants.MS_SQL_SERVER_PORT;
            default:
                return 0;
        }
    }
    
    private String getDbmsDefaultUsername (int dbms){
        switch(dbms){
            case DBMS.ORACLE:
                return Constants.ORACLE_USER;
            case DBMS.MYSQL:
                return Constants.MYSQL_USER;
            case DBMS.MS_SQL_SERVER:
                return Constants.MS_SQL_SERVER_USER;
            default:
                return "";
        }
    }
    
    private String getConnectionString(int dbms, String hostname, int portNumber, String databaseName){
        switch(dbms){
            case DBMS.ORACLE:
                if(portNumber == 0){
                    portNumber = Constants.ORACLE_PORT;
                }
                return "jdbc:oracle:thin:@" + hostname + ":1521:XE";
            case DBMS.MYSQL:
                if(portNumber == 0){
                    portNumber = Constants.MYSQL_PORT;
                }
                if(databaseName != null && !databaseName.isEmpty()){
                    return "jdbc:mysql://" + hostname + ":" + portNumber + "/" + databaseName;
//                    return "jdbc:mysql://" + hostname + ":" + portNumber + "/" + databaseName + "?useSSL=false";
                }else{
                    return "jdbc:mysql://" + hostname + ":" + portNumber;
                }
            case DBMS.MS_SQL_SERVER:
                if(portNumber == 0){
                    portNumber = Constants.MS_SQL_SERVER_PORT;
                }
                if(databaseName != null && !databaseName.isEmpty()){
                    return "jdbc:sqlserver://" + hostname + ":" + portNumber + ";database=" + databaseName + ";";
                }else{
                    return "jdbc:sqlserver://" + hostname + ":" + portNumber + ";";
                }
            default:
                return "";
        }
    }
    
    private void fetchTables(Connection conn){
        try{
            DatabaseMetaData dbmd = conn.getMetaData();
            String catalog = null;
            String schemaPattern = null;
            String tableNamePattern = null;
            String[] types = new String[]{"TABLE"};
//            ResultSet getTables(String catalog, String schemaPattern, String tableNamePattern, String types[])
            ArrayList<String> tablesList = new ArrayList<>();
            int count = 0;
            if(sourceDbms == DBMS.ORACLE || sourceDbms == DBMS.MS_SQL_SERVER){
                if(sourceDbms == DBMS.MS_SQL_SERVER){
                    catalog = sourceDatabasename;
                }
                ResultSet rs = dbmd.getTables(catalog, schemaPattern, tableNamePattern, types);
                ResultSetMetaData rsmd = rs.getMetaData();
                // Try connect to access data from each table, add to list if accessible
                while(rs.next()){
                    String tableName = null;
                    try{
                        tableName = rs.getString(3);
    //                        sql = "SELECT * FROM " + tableName; // Dangerous and time-consuming query
                        sql = "SELECT * FROM " + tableName + " WHERE 2 < 1";  // Fetches no records
                        sourceStmt.executeQuery(sql);
                        tablesList.add(tableName);
                        count++;
                    }
                    catch(SQLException ex){
                        // Ignore the error
                    }
                }
                rs.close();
            }
            else if(sourceDbms == DBMS.MYSQL){
                catalog = sourceDatabasename;
                ResultSet rs = dbmd.getTables(catalog, schemaPattern, tableNamePattern, types);
                ResultSetMetaData rsmd = rs.getMetaData();
                while(rs.next()){
                    // Add Table names in List
                    tablesList.add(rs.getString(3));
                    count++;
                }
                rs.close();
            }
            if(count == 0){
                lblSourceTables.setText(String.valueOf(0));
                JOptionPane.showMessageDialog(this, "No Tables found in selected Database for this user.", "Warning", JOptionPane.WARNING_MESSAGE);
            }else{
                Collections.sort(tablesList);
                for(String tableName : tablesList){
                    sourceTablesListModel.addElement(tableName);
                }
                lblSourceTables.setText(String.valueOf(sourceTablesListModel.size()));
            }
        } 
        catch(Exception ex){
            sourceTablesListModel.removeAllElements();
            lblSourceTables.setText(String.valueOf(0));
            JOptionPane.showMessageDialog(this, ex.getMessage(), "Error", JOptionPane.ERROR_MESSAGE);
        }
    }
    
    // Fetch Table Silently
    private List<String> fetchTablesWithoutErrorMessage(Connection conn){
        List<String> tablesList = new ArrayList<>();
        try{
            DatabaseMetaData dbmd = conn.getMetaData();
            String catalog = null;
            if(destDbms == DBMS.MYSQL || destDbms == DBMS.MS_SQL_SERVER){
                catalog = destDatabasename;
            }
            String schemaPattern = null;
            String tableNamePattern = null;
            String[] types = new String[]{"TABLE"};
            ResultSet rs = dbmd.getTables(catalog, schemaPattern, tableNamePattern, types);
            while(rs.next()){
                tablesList.add(rs.getString(3));
            }
            rs.close();
        } 
        catch(Exception ex){
            // Ignore the Error
        }
        return tablesList;
    }
    
    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
//                if ("Metal".equals(info.getName())) {
//                if ("CDE/Motif".equals(info.getName())) {
//                if ("Windows".equals(info.getName())) {
//                if ("Windows Classic".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(MigrationApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(MigrationApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(MigrationApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(MigrationApplication.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new MigrationApplication().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnMigrateTables;
    private javax.swing.JButton btnMoveAll;
    private javax.swing.JButton btnMoveAllBack;
    private javax.swing.JButton btnMoveSelected;
    private javax.swing.JButton btnMoveSelectedBack;
    private javax.swing.JButton btnTab1Next;
    private javax.swing.JButton btnTab1Reset;
    private javax.swing.JButton btnTab2Next;
    private javax.swing.JButton btnTab3Reset;
    private javax.swing.JButton btnTestDestConnection;
    private javax.swing.JButton btnTestSourceConnection;
    private javax.swing.JCheckBox chkCreateDatabase;
    private javax.swing.JCheckBox chkDropTables;
    private javax.swing.JComboBox<String> cmbDestDbms;
    private javax.swing.JComboBox<String> cmbSourceDatabaseNames;
    private javax.swing.JComboBox<String> cmbSourceDbms;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel10;
    private javax.swing.JLabel jLabel11;
    private javax.swing.JLabel jLabel12;
    private javax.swing.JLabel jLabel13;
    private javax.swing.JLabel jLabel14;
    private javax.swing.JLabel jLabel15;
    private javax.swing.JLabel jLabel16;
    private javax.swing.JLabel jLabel17;
    private javax.swing.JLabel jLabel18;
    private javax.swing.JLabel jLabel19;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel20;
    private javax.swing.JLabel jLabel21;
    private javax.swing.JLabel jLabel22;
    private javax.swing.JLabel jLabel23;
    private javax.swing.JLabel jLabel24;
    private javax.swing.JLabel jLabel25;
    private javax.swing.JLabel jLabel3;
    private javax.swing.JLabel jLabel4;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JLabel jLabel6;
    private javax.swing.JLabel jLabel7;
    private javax.swing.JLabel jLabel8;
    private javax.swing.JLabel jLabel9;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JPanel jPanel2;
    private javax.swing.JPanel jPanel3;
    private javax.swing.JPanel jPanel4;
    private javax.swing.JPanel jPanelTable;
    private javax.swing.JProgressBar jProgressBar1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JScrollPane jScrollPane2;
    private javax.swing.JScrollPane jScrollPane3;
    private javax.swing.JTabbedPane jTabbedPane;
    private javax.swing.JTable jTable;
    private javax.swing.JLabel lblDestDatabaseName;
    private javax.swing.JLabel lblDestTables;
    private javax.swing.JLabel lblSourceDatabaseName;
    private javax.swing.JLabel lblSourceTables;
    private javax.swing.JLabel lblTableName;
    private javax.swing.JLabel lblTestDestConn;
    private javax.swing.JLabel lblTestSourceConn;
    private javax.swing.JList<String> listDestTables;
    private javax.swing.JList<String> listSourceTables;
    private javax.swing.JTextField txtDestDatabaseName;
    private javax.swing.JTextField txtDestHostname;
    private javax.swing.JPasswordField txtDestPassword;
    private javax.swing.JTextField txtDestPortNo;
    private javax.swing.JTextField txtDestUsername;
    private javax.swing.JTextField txtSourceHostname;
    private javax.swing.JPasswordField txtSourcePassword;
    private javax.swing.JTextField txtSourcePortNo;
    private javax.swing.JTextField txtSourceUsername;
    // End of variables declaration//GEN-END:variables

}
